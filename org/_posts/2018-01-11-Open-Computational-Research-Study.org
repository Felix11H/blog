#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil; html-postamble:nil
#+BEGIN_HTML
---
layout: post
title: Open Computational Research Study - A Proof of Concept
permalink: open-comp-rsc-concept
date: 2018-03-08
categories:
tags:
---
#+END_HTML

Computational research is often published without the code and computational environment that generated the results, failing to meet openness and reproducibility criteria that are demanded by a growing number of researchers and journals[fn:nosek][fn:openneuro][fn:nature].

Here I'm presenting a proof of concept, how code and results of a complex computational research project can be published in a way to satisfy important openness and reproducibility requirements. Requiring only a Docker installation, it should be possible for users on any system to comprehend and reproduce any and all parts of a project shared this way.

#+BEGIN_HTML
<!-- more -->
#+END_HTML

Specifically, the concept presented here addresses two issues not typically considered when publishing scientific code:

1. Research code published without its computational dependencies may become exceedingly difficult to compile and execute, to the point that a rewrite of the code from the ground up becomes a preferred solution over trying to recreate the computational environment[fn:topa][fn:rescience].
2. A large computational project that is not sufficiently documented (which computations, when, why and how?) might be reproducible in the sense that a single run command creates all the figures shown the paper, but it might not be comprehensible, failing to show which parts of the code affect which results. Moreover, if the simulations are computationally expensive, it might be of importance to be able to identify and reproduce only selected parts of the project.
   
Both points may be equally detrimental to any effort of /straightforwardly/ reproducing the computational results of a study. To demonstrate the concept I'm proposing here, I have created an [[http://dx.doi.org/10.5281/zenodo.1188953][example study]] that anyone having a Docker installation should be able to reproduce and expand. 

Below I'm describing this example study in detail and explain how it is implemented. I would love to hear your thoughts and feedback!


* An Example Study

I've created a small [[https://zenodo.org/record/1188953][computational project]] to demonstrate a way how the above issues may be solved in practice. My proposed solution relies on two main components: [[https://docs.docker.com/][Docker]], to provide an isolated computational environment that contains all needed dependencies and [[http://neuralensemble.org/sumatra/][Sumatra]], to provide a lab notebook of the computational project to be able to comprehend and replicate parts of a large and complex computational study.

The downloadable [[https://zenodo.org/record/1188953/files/open-comp-rsc.tar.gz][archive]] for this example project contains the Python source code and the data it generated. Additionally included is version control (~.git/~) and simulation record information (~.smt/~). Finally, I provided scripts to access the computational environment through Docker for Linux, Mac and Windows 7 systems (I'm not able to test on other Windows versions).

For Linux systems for example, ~access_lab_linux.sh~ contains

#+BEGIN_SRC sh
#!/bin/bash

docker run -it -p 127.0.0.1:8015:8000 \
       --user="$(id -u):$(id -g)" \
       -v $(pwd):/home/lab \
       felix11h/docker-open-comp-rsc \
       /bin/bash -c \
       'cd /home/lab/comp/;
        screen -d -m smtweb --allips;
        source ../startup_messg_linux.sh;
         bash'
#+END_SRC

Running the script first tells Docker to run the image ~felix11h/open-com-rsc~. As the image is very likely not found on your machine, the image will be automatically downloaded from [[https://hub.docker.com/r/felix11h/docker-open-comp-rsc/][Docker Hub]]. This is convenient for users, but has another advantage: As the image was built by Docker Hub, you can verify the contents of the image by inspecting the associated [[https://hub.docker.com/r/felix11h/docker-open-comp-rsc/~/dockerfile/][Dockerfile]]. In this case the image was built from the following Dockerfile

#+BEGIN_SRC Dockerfile
FROM ubuntu:16.04 
MAINTAINER felix11h.dev@gmail.com

USER root 

RUN apt-get -qy update 
RUN apt-get install -qy apt-utils python python-dev python-pip git screen 

RUN pip install --upgrade pip 
RUN pip install numpy scipy matplotlib sumatra gitpython configparser 

RUN useradd -ms /bin/bash docker
USER docker
#+END_SRC

Once the image is downloaded, a few more things happen: The current directory containing code and data is mounted within the Docker container, the address ~0.0.0.0:8000~ in the container is mapped to ~127.0.0.1:8015~ on the host, the Sumatra web interface ~smtweb~ is run in a background screen and, finally, a welcome message is printed once the container is accessed.

The 5 steps from downloading the archive to accessing the container are illustrated in the animation below

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/open-com-rsc_animated-docker.gif" width="80%" style="display:block;margin:2em auto 5em;"/>
#+END_HTML


* Sumatra lab notebook

With the Docker container the full research environment is now accessible to the user. To access the lab notebook for example, one can simply navigate the browser to the address printed in the terminal. On Linux systems one would open ~http://127.0.0.1:8015~. 

This lab notebook was automatically generated by Sumatra while running the original simulations. The web interface lists all simulation records or, in the alternative view, all data of the computational project. The notebook contains the full information of the simulation: version of the code, parameters, input and output data information, dependencies, machine specification and standard output -- the full provenance of the results of this simulation is available. The animation below gives an overview of the lab notebooks contents of the example study

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/open-com-rsc_animated-smtweb.gif" width="80%" style="display:block;margin:2em auto 5em;"/>
#+END_HTML


* Reproducibility 

Sumatra also provides the ability to easily replicate and verify the results of a given simulation via the ~smt repeat~ command. To verify, for example, the results of a computation with label ~d6bcfd41~, one can use the command

: $ smt repeat d6bcfd41

This repeats the simulation ~d6bcfd41~ with the exact parameters and specifications as the original computation and records the output of this process under a new label. The printed output should verify that the reproduced and original simulation match exactly. Note that this doesn't only compare to output data file but checks various parameters that might influence results

#+BEGIN_SRC sh
$ smt diff d6bcfd41 20180111-121253
Record 1                : d6bcfd41
Record 2                : 20180111-121253
Executable differs      : no
Code differs            : no
  Repository differs    : no
  Main file differs     : no
  Version differs       : no
  Non checked-in code   : no
  Dependencies differ   : no
Launch mode differs     : no
Input data differ       : no
Script arguments differ : no
Parameters differ       : no
Data differ             : no
#+END_SRC


In the example study I provide the script ~repeat_all.sh~ to repeat all computations of the project in chronological order

#+BEGIN_SRC sh
#!/bin/bash

smt list -r | xargs -L1 smt repeat
#+END_SRC

With this all computations are executed in their original order -- the full study can be reproduced with this command. This also allows for sharing of the computational project without any generated data, which can be helpful if this data is large. The final animation shows the ~smt repeat~ command in the example study

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/open-com-rsc_animated-smt-repeat.gif" width="80%" style="display:block;margin:2em auto 3.5em;"/>
#+END_HTML



# * Form of publication

# The Docker image in this example can be found onand is built from the following simple Dockerfile

# #+BEGIN_SRC Dockerfile
# FROM ubuntu:16.04
# MAINTAINER felix11h.dev@gmail.com

# USER root

# RUN apt-get -qy update
# RUN apt-get install -qy apt-utils python python-dev python-pip git screen 

# RUN pip install --upgrade pip
# RUN pip install numpy scipy matplotlib sumatra gitpython configparser 

# RUN useradd -ms /bin/bash docker
# USER docker
# #+END_SRC

# Conveniently, 

# There are different levels of preservation of the computational environment that need to be considered[fn:gruening]. A Dockerfile alone will eventually not be sufficient to reproduce the environment as versions of the required libraries and their availability may quickly change[fn:docker_test]. To ensure that the computational environment remains available, the Docker image is archived at Zenodo as described in this [[https://www.software.ac.uk/blog/2016-09-12-reproducible-research-citing-your-execution-environment-using-docker-and-doi][article]] by Robert Haines and Caroline Jay. 

# With the Docker container running, the lab notebook interface of Sumatra can be accessed on the same machine through a web browser, displaying all information on simulations ("records") that were run and what data they produced:

# #+BEGIN_HTML
# <img src="{{ site.baseurl }}/assets/open-com-rsc-sumatra.gif" width="90%" style="display:block;margin:2em auto 2em;"/>
# #+END_HTML


# * Replication

# All data needed to is found at Zenodo. In the downloadable archive I'm providing the . The computational environment is provided in form of a Docker image, which is mostly easily obtained by simply executing the ~access_lab.sh~ script, the . For purposes of demonstration, the image is separately also available at Zenodo and after unpacking unpacking the archive can be added to the machine local images via

# :  

# Note that only part of this repository is in under git version control. This is done by design - parameters data, should not. This way. However, the full repository. 

# Steps needed to access the environment and replicate results

# 1. Install Docker on your machine  
# 2. Download the
# 3. Access the container by executing the ~access_lab~ script (currently provided for Windows 7 and Linux)
# 4. 

# This process, specifically steps 3. and 4. are illustrated below:

* Feedback?

Publishing computational research projects in this proposed format should provide direct access to the results and a straightfoward way to reproduce and interact with the code and generated results. With the example study I provided I wanted to show that such an implementation is possible, however the concept still needs to be proven on the scale of a full study. 

As part of my participation in the [[https://en.wikiversity.org/wiki/Wikimedia_Deutschland/Open_Science_Fellows_Program][Open Science Fellows Program]], I'm [[https://de.wikiversity.org/wiki/Wikiversity:Fellow-Programm_Freies_Wissen/Einreichungen/Open_computational_research_study][planning]] to publish my computational neuroscience research following this format. For this, and this is part of my motivation for this post, I want to ask for your feedback. Does the concept I present make for an open, reproducible computational research study? What aspects are you missing? What problems are you foreseeing? I would be very grateful for your feedback!


[fn:nosek] https://twitter.com/BrianNosek/status/949015512633274368
[fn:openneuro] http://www.opensourceforneuroscience.org/
[fn:nature] http://www.nature.com/authors/policies/availability.html
[fn:rescience] Rougier, N. P. /et al./ Sustainable computational science: the ReScience initiative. [[https://arxiv.org/abs/1707.04393][arXiv:1707.04393]] (2017)
[fn:gruening] Grüning, B. /et al./ Practical computational reproducibility in the life sciences.[[https://doi.org/10.1101/200683][ bioRxiv 200683]] (2017)
[fn:docker_test] https://github.com/Felix11H/docker-reproduction-of-published-images
[fn:topa] Topalidou, M., Leblois, A., Boraud, T. & Rougier, N. P. /A long journey into reproducible computational neuroscience/. Front. Comput. Neurosci. 9, (2015). 
