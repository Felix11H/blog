#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil;
#+BEGIN_HTML
---
layout: post
title: A reproducible research environment with Sumatra and Docker
categories:
    - reproducible-research
    - Docker
    - Sumatra
---
#+END_HTML


Docker is a [[http://arxiv.org/abs/1410.0846][promising candidate]] for a computational research environment that allows for easy replication of computations and results. [[http://www.neuralensemble.org/sumatra/][Sumatra]] is an automated laboratory notebook for computational research projects. Do Sumatra and Docker work well together? 

#+BEGIN_HTML
<!-- more -->
#+END_HTML

Yes! Here's some details that might help you get started using Docker and Sumatra in combination: 

* A docker image for Sumatra

I've created a basic docker image with Sumatra 0.7.0 and git bindings and uploaded it to the [[https://hub.docker.com/r/felix11h/smt_docker/][Docker Hub]]. The image  ~felix11h/smt_docker~ is built from the following Dockerfile: 

#+BEGIN_SRC dockerfile
FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get install -y python python-dev python-pip
 
RUN apt-get install -y git
RUN pip install sumatra
RUN pip install gitpython

WORKDIR /home

EXPOSE 8000 
#+END_SRC

If you have Docker correctly installed, you can

#+BEGIN_SRC sh
docker run -it -p 8000:8000 felix11h/smt_docker /bin/bash
#+END_SRC

This command, after not finding the image ~felix11h/smt_docker~ locally, pulls the docker image created from the code above from the Docker Hub and runs it with the following parameters:

 - ~-i (--interactive)~  Keeps STDIN open even if not attached.
 - ~-t (--tty)~  Allocates a pseudo-TTY. Used here to run a throwaway interactive shell.
 - ~-p 8000:8000 (--publish)~ Publishes the container's port ~8000~ to the host. ~ip:hostPort:containerPort~ and ~hostPort:containerPort~ are the two formats I used so far.
 - ~/bin/bash~ Opens a Bash shell.


* Sumatra within the container


From within the container, let's test if Sumatra works as expected:

#+BEGIN_SRC sh
mkdir smt_test
cd smt_test
git init
smt init Test_Project
smtweb --allips
#+END_SRC


Here, the flag ~--allips~ to smtweb is critical. It hosts the Sumatra web interface at ~0.0.0.0:8000~ (as opposed to ~127.0.0.1:8000~), which is exactly the address the docker container assumes when trying to publish the content the host. I was about to add this option to Sumatra myself, but found it was alrealdy there!

With this you should be able to

#+BEGIN_SRC
curl 
#+END_SRC

from the Docker host (that is outside the container!). Or, of course, simply navigate to ~127.0.0.1:8000~ in your browser.

* Mounting a data volume 

If you want to save the results of computations that you're running within a container, mounting a data volume of your docker host to the container is likely the easiest solution. To do this, you have add yet another argument to the docker run command

#+BEGIN_SRC sh
docker run -v 
#+END_SRC

It's also worth considering 

* Permanently host the web interface with screen

When running computational experiments within a Docker container, it is beneficial to be able to host the webinterface and run simulations at the same time. An easy solution is to use ~screen~. Install it in the container via

#+BEGIN_SRC sh
apt-get update
apt-get install screen
#+END_SRC

Then you can call ~screen~, run ~smtweb --allips~ and detach the screen by pressing ~CTRL+a d~. This allows you to keep the webinterface hosted while you're running simulations. To get back the original screen, use ~screen -r~. The neuroenv image (see below) has ~screen~ included.


* Reproducible computational neuroscience simulations

At [[http://neuralensemble.blogspot.de/2015/08/docker-images-for-neuronal-network.html][neuralensemlbe]], Andrew Davison has provided docker images for . The image I'm currently is adding on top of this image, three things

 - Sumatra
 - ~screen~ 
 - LaTeX

Here's the shell script I use to run the image, 

You can find get this image  

Finally, here's the Docker image I'm using. It's built on top of neuralensemble/simulation and additionally provides Sumatra, Texlive (matplotlib.pyplot LaTeX rendering) and screen. It also automatically activates the correct Python virtualenv and . More here.

