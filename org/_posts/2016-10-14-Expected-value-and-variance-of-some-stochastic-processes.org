#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil; html-postamble:nil
#+BEGIN_HTML
---
layout: post
title: Expected value and variance of some stochastic processes
permalink: some_stochastic_processes
date: 2016-10-14
type: post
published: true
status: publish
categories:
- mathematics
tags:
- stochastic process
- probability theory
---
#+END_HTML

As an exercise, I illustrate how expected value and variance of some stochastic processes evolve in time.

#+BEGIN_HTML
<!-- more -->
#+END_HTML

* Poisson process

Let $(N_t)_{t \in \left[0,\infty\right)}$ be a Poisson process with rate $\lambda$. Then $\operatorname{E}(N_t) = \lambda t$ and $\operatorname{Var}(N_t) = \lambda t$. Below several paths of a Poisson process are shown. These are well contained within $\operatorname{E}(N_t)$ plus and minus the three time standard deviation $3 \sigma$, where $\sigma = \sqrt{\lambda t}$ from above.

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/pp_sample_1.png" width="75%" style="display:block;margin:2em auto 2em;"/>
#+END_HTML

The figure was produced by the following Python code

#+BEGIN_SRC python

import numpy as np

class Poisson_process(object):

    def __init__(self, rate, dt=0.01):
        self.N = 0
        self.t = 0
        self.dt = dt
        self.rate = rate
        
    def sample_path(self, T, reset=None):

        path = []

        if reset != None:
            self.N = reset

        for t in np.arange(0,T,self.dt):
            k = np.random.poisson(self.rate*self.dt)
            if k>0:
                self.N+=1
            path.append(self.N)

        return path


rate = 1.
dt = 0.01
pp = Poisson_process(rate, dt=dt)
T = 25
ts = np.arange(0,T,dt)

import matplotlib as mpl
mpl.use('Agg')
import pylab as pl
from matplotlib import rc

rc('text', usetex=True)
pl.rcParams['text.latex.preamble'] = [
    r'\usepackage{tgheros}',    # helvetica font
    r'\usepackage{sansmath}',   # math-font matching helvetica
    r'\sansmath'                # actually tell tex to use it!
    r'\usepackage{siunitx}',    # micro symbols
    r'\sisetup{detect-all}',    # force siunitx to use the fonts
]  


fig = pl.figure()
fig.set_size_inches(4,3)

pl.plot(ts,ts, 'k', label=r'$\mu$')

pl.plot(ts, ts+3*np.sqrt(rate*ts), 'r', lw = 1., label=r'$\mu \pm 3 \sigma$')
pl.plot(ts, ts-3*np.sqrt(rate*ts), 'r', lw = 1.)


for k in range(12):
    path = pp.sample_path(T, reset=0)
    pl.plot(ts, path, 'gray')

pl.legend(loc='upper left', frameon=False, prop={'size':12})

pl.xlabel('time')

pl.savefig("pp_sample.png", dpi=300, bbox_inches='tight')

#+END_SRC


* Wiener process

Let  $(X_t)_{t \in \left[0, \infty\right)}$ be a Wiener process. It is $\operatorname{E}(X_t) = 0$ and $\operatorname{Var}(X_t) = t$. Below 15 sampled paths of the Wiener process are shown. It's trace are well contained within $2 \sigma$ or $3 \sigma$, where $\sigma = \sqrt{t}$ is the standard deviation. 

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/wp_sample_1.png" width="90%" style="display:block;margin:2em auto 2em;"/>
#+END_HTML

The figure was generated by the following Python code

#+BEGIN_SRC python

import numpy as np

class Wiener_process(object):

    def __init__(self, dt=0.01):
        self.X = 0
        self.t = 0
        self.dt = dt
        
    def sample_path(self, T, reset=None):

        path = []

        if reset != None:
            self.X = reset

        for t in np.arange(0,T,self.dt):
            x = np.random.normal(0,np.sqrt(self.dt))
            self.X+=x
            path.append(self.X)

        return path


dt = 0.01
wp = Wiener_process(dt=dt)
T = 50
ts = np.arange(0,T,dt)


import matplotlib as mpl
mpl.use('Agg')
import pylab as pl
from matplotlib import rc

rc('text', usetex=True)
pl.rcParams['text.latex.preamble'] = [
    r'\usepackage{tgheros}',    # helvetica font
    r'\usepackage{sansmath}',   # math-font matching helvetica
    r'\sansmath'                # actually tell tex to use it!
    r'\usepackage{siunitx}',    # micro symbols
    r'\sisetup{detect-all}',    # force siunitx to use the fonts
]  


fig = pl.figure()
fig.set_size_inches(5,3)

for k in range(15):
    path = wp.sample_path(T, reset=0)
    pl.plot(ts, path, 'gray')

pl.plot(ts, 2*np.sqrt(ts), 'r', linestyle='dashed', lw=1., label=r'$2 \sigma$')
pl.plot(ts, -2*np.sqrt(ts), 'r', linestyle='dashed', lw=1.)
    
pl.plot(ts, 3*np.sqrt(ts), 'r', lw = 1., label=r'$3 \sigma$')
pl.plot(ts, -3*np.sqrt(ts), 'r', lw = 1.)

pl.ylim(-22.5,22.5)

pl.legend(loc='upper left', frameon=False, prop={'size':12})

pl.xlabel('time')

pl.savefig("wp_sample.png", dpi=300, bbox_inches='tight')

#+END_SRC
  

