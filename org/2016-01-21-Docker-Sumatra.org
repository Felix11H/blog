#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil;
#+BEGIN_HTML
---
layout: post
title: A reproducible research environment with Sumatra and Docker
categories:
    - reproducible-research
    - Docker
    - Sumatra
---
#+END_HTML


Docker is a [[http://arxiv.org/abs/1410.0846][promising candidate]] for a computational research environment that allows for easy replication of computations and results. [[http://www.neuralensemble.org/sumatra/][Sumatra]] is an automated laboratory notebook for computationl research projects. Do Sumatra and Docker work well together? 

#+BEGIN_HTML
<!-- more -->
#+END_HTML

Yes! Here's some details that might help you get started using Docker and Sumatra in combination: 

* A docker image for Sumatra

I've created a basic docker image with Sumatra 0.7.0 and git bindings and uploaded it to the [[https://hub.docker.com/r/felix11h/smt_docker/][Docker Hub]]. The image  ~felix11h/smt_docker~ is built from the following Dockerfile: 

#+BEGIN_SRC dockerfile
FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get install -y python python-dev python-pip
 
RUN apt-get install -y git
RUN pip install sumatra
RUN pip install gitpython

WORKDIR /home

EXPOSE 8000 
#+END_SRC

If you have Docker set up, you can

#+BEGIN_SRC sh
docker run -it -p 8000:8000 felix11h/smt_docker /bin/bash
#+END_SRC

This command, after not finding the image locally, pulls the Sumatra docker image created from the Dockerfile above from DockerHub and runs it with the following parameters:

 - ~-i~
 - ~-t~
 - ~-p 8000:8000~
 - ~/bin/bash~


* Sumatra within the container


From within the container, let's test if Sumatra works as expected:

#+BEGIN_SRC sh
mkdir smt_test
cd smt_test
git init
smt init Test_Project
smtweb --allips 
#+END_SRC


Here the flag ~--allips~ to smtweb is critical. It hosts the Sumatra webinterface at ~0.0.0.0:8000~ (as opposed to ~127.0.0.1:8000~), which is exactly the address the docker container assumes when trying to publish the content the host. I was about to add this option to Sumatra myself, but found it was alrealdy there!

With this you should be able to

#+BEGIN_SRC
curl 
#+END_SRC

from the Docker host, that is outside the container! Or, of course, simply navigate to ~127.0.0.1:8000~ in your browser.

* Setting up your computational environment

#+BEGIN_SRC sh
sudo docker run
#+END_SRC


or build the image yourself by creating a directory containing the dockerfile above (named "dockerfile") and execute


* Permanently host the webinterface with screen

Both smt and neuroenv images (!!! correct image names) have ~screen~ installed. With this you can

#+BEGIN_SRC sh
screen
smtweb --allips
#+END_SRC

Then press ~CTRL+a d~ to detach the screen. This allows you to keep the webinterface hosted while you're running simulations. To get back the original screen, use ~screen -r~ and you can stop and restart the server if you need to.


* What I'm using

Finally, here's the Docker image I'm using. It's built on top of neuralensemble/simulation and additionally provides Sumatra, Texlive (matplotlib.pyplot LaTeX rendering) and screen. It also automatically activates the correct Python virtualenv and . More here.

* References
http://neuralensemble.blogspot.de/2015/08/docker-images-for-neuronal-network.html
