#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil; html-postamble:nil
#+BEGIN_HTML
---
layout: post
title: Open Computational Research Study - A Proof of Concept
permalink: open-comp-rsc-concept
date: 2018-01-11
categories:
tags:
---
#+END_HTML

Computational research is often published without the code and computational environment that generated the results, failing to meet openness and reproducibility criteria that are demanded by a growing number of researchers and journals[fn:nosek][fn:openneuro][fn:nature].

Here I'm presenting a proof of concept, how code and results of a complex computational research project can be published in a way to satisfy important openness and reproducibility requirements. Requiring only a Docker installation, it should be possible for users on any system to comprehend and reproduce any and all parts of a project shared this way.

#+BEGIN_HTML
<!-- more -->
#+END_HTML

Specifically, the concept presented here addresses two issues not typically considered when publishing scientific code:

1. Research code published without its computational dependencies may become exceedingly difficult to compile and execute, to the point that a rewrite of the code from the ground up becomes a preferred solution over trying to recreate the computational environment[fn:topa][fn:rescience].
2. A large computational project that is not sufficiently documented (which computations, when, why and how?) might be reproducible in the sense that a single run command creates all the figures shown the paper, but it might not be comprehensible, failing to show which parts of the code affect which results. Moreover, if the simulations are computationally expensive, it might be of importance to be able to identify and reproduce only selected parts of the project.
   
Both points may be equally detrimental to any effort of /straightforwardly/ reproducing the computational results of a study. To demonstrate the concept I'm proposing here, I have created an [[http://doi.org/10.5281/zenodo.1145678][example study]] that anyone having a Docker installation should be able to reproduce and expand. 

Below I'm describing this example study in detail and explain how it is implemented. I would love to hear your thoughts and feedback!


* An Example Study

I've created a small [[http://doi.org/10.5281/zenodo.1145678][computational project]] to demonstrate a way how the above issues may be solved in practice. My proposed solution relies on two main components: [[https://docs.docker.com/][Docker]], to provide an isolated computational environment that contains all needed dependencies and [[http://neuralensemble.org/sumatra/][Sumatra]], to provide a lab notebook of the computational project to be able to comprehend and replicate parts of a large and complex computational study.

To reproduce the study, it is sufficient to download the [[http://doi.org/10.5281/zenodo.1145678][archive]] containing the code and data, given that Docker is installed. In the archive I'm providing convenient access scripts to the computational environment for Linux, Mac and Windows 7 systems (I'm not able to test on other Windows versions). 

For example on Linux one would change into the unpacked archive and execute the corresponding access script 

#+BEGIN_SRC sh
$ cd ~/open-comp-rsc
$ source access_lab_linux.sh
#+END_SRC

This runs the Docker image ~felix11h/docker-open-comp-rsc~, which will be automatically downloaded from [[https://hub.docker.com/r/felix11h/docker-open-comp-rsc/][Docker Hub]], if it is not available on the machine already. In addition it hosts the current directory containing the code and data and runs the Sumatra lab notebook in the background. 

With this, the full research environment is now accessible to the user. To access the lab notebook for example, one can simply navigate the browser to the address printed in the terminal. The whole process is demonstrated in the animation below:

#+BEGIN_HTML
<img src="{{ site.baseurl }}/assets/open-com-rsc-sumatra_2.gif" width="90%" style="display:block;margin:2em auto 2em;"/>
#+END_HTML

One reason the Sumatra lab notebook is included is the ability to easily verify the results of any computation. To do this one can use the ~smt repeat~ command. To verify, for example, the results of the comupatation with label ~18e35e47~, one can use the command

: $ smt repeat 18e35e47

The printed output should verify the results. Note that this doesn't only compare to output data file but checks various parameters that might influence results:

#+BEGIN_SRC sh
$ smt diff 18e35e47 20180111-121253
Record 1                : 18e35e47
Record 2                : 20180111-121253
Executable differs      : no
Code differs            : no
  Repository differs    : no
  Main file differs     : no
  Version differs       : no
  Non checked-in code   : no
  Dependencies differ   : no
Launch mode differs     : no
Input data differ       : no
Script arguments differ : no
Parameters differ       : no
Data differ             : no
#+END_SRC




# * Form of publication

# The Docker image in this example can be found onand is built from the following simple Dockerfile

# #+BEGIN_SRC Dockerfile
# FROM ubuntu:16.04
# MAINTAINER felix11h.dev@gmail.com

# USER root

# RUN apt-get -qy update
# RUN apt-get install -qy apt-utils python python-dev python-pip git screen 

# RUN pip install --upgrade pip
# RUN pip install numpy scipy matplotlib sumatra gitpython configparser 

# RUN useradd -ms /bin/bash docker
# USER docker
# #+END_SRC

# Conveniently, 

# There are different levels of preservation of the computational environment that need to be considered[fn:gruening]. A Dockerfile alone will eventually not be sufficient to reproduce the environment as versions of the required libraries and their availability may quickly change[fn:docker_test]. To ensure that the computational environment remains available, the Docker image is archived at Zenodo as described in this [[https://www.software.ac.uk/blog/2016-09-12-reproducible-research-citing-your-execution-environment-using-docker-and-doi][article]] by Robert Haines and Caroline Jay. 

# With the Docker container running, the lab notebook interface of Sumatra can be accessed on the same machine through a web browser, displaying all information on simulations ("records") that were run and what data they produced:

# #+BEGIN_HTML
# <img src="{{ site.baseurl }}/assets/open-com-rsc-sumatra.gif" width="90%" style="display:block;margin:2em auto 2em;"/>
# #+END_HTML


# * Replication

# All data needed to is found at Zenodo. In the downloadable archive I'm providing the . The computational environment is provided in form of a Docker image, which is mostly easily obtained by simply executing the ~access_lab.sh~ script, the . For purposes of demonstration, the image is separately also available at Zenodo and after unpacking unpacking the archive can be added to the machine local images via

# :  

# Note that only part of this repository is in under git version control. This is done by design - parameters data, should not. This way. However, the full repository. 

# Steps needed to access the environment and replicate results

# 1. Install Docker on your machine  
# 2. Download the
# 3. Access the container by executing the ~access_lab~ script (currently provided for Windows 7 and Linux)
# 4. 

# This process, specifically steps 3. and 4. are illustrated below:

* Going Forward

Publishing a computational research project in this proposed format should provide direct access to the results of the study and a way to reproduce and interact with the code and data through the lab notebook interface. With the example study I provided I could show that such an implementation is possible, however the concept still needs to be proven on the scale of a full study. 

As part of my participation in the [[https://en.wikiversity.org/wiki/Wikimedia_Deutschland/Open_Science_Fellows_Program][Open Science Fellows Program]], I'm [[https://de.wikiversity.org/wiki/Wikiversity:Fellow-Programm_Freies_Wissen/Einreichungen/Open_computational_research_study][planning]] to publish my computational neuroscience research following this format. For this, and this is part of my motivation for this post, I want to ask for your feedback. Does the concept I present make for an open, reproducible computational research study? What aspects are you missing? What problems are you foreseeing? I would be very grateful for your feedback!


[fn:nosek] https://twitter.com/BrianNosek/status/949015512633274368
[fn:openneuro] http://www.opensourceforneuroscience.org/
[fn:nature] http://www.nature.com/authors/policies/availability.html
[fn:rescience] Rougier, N. P. /et al./ Sustainable computational science: the ReScience initiative. [[https://arxiv.org/abs/1707.04393][arXiv:1707.04393]] (2017)
[fn:gruening] Gr√ºning, B. /et al./ Practical computational reproducibility in the life sciences.[[https://doi.org/10.1101/200683][ bioRxiv 200683]] (2017)
[fn:docker_test] https://github.com/Felix11H/docker-reproduction-of-published-images
[fn:topa] Topalidou, M., Leblois, A., Boraud, T. & Rougier, N. P. /A long journey into reproducible computational neuroscience/. Front. Comput. Neurosci. 9, (2015). 
