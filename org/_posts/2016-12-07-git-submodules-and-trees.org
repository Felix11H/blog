#+STARTUP: noindent showeverything
#+OPTIONS: toc:nil; html-postamble:nil
#+BEGIN_HTML
---
layout: post
title: Maintaining a git project within another git repository
permalink: git-submod-subtree
date: 2016-12-07
categories:
 - version-control
tags:
 - version-control
 - git
 - tools
---
#+END_HTML

I would like to maintain git project with its own commit history within another git repository. I keep hearing that either submodules or subtrees are the way to go. Here I try to understand both and find out what works best for me.

#+BEGIN_HTML
<!-- more -->
#+END_HTML

* Submodules

** Setting up

Ok, let's make a git repository first.

#+BEGIN_SRC sh
mkdir tryA
cd tryA/
git init
touch fileA
git add fileA 
git commit -am 'init proj A'
#+END_SRC

Then /within/ this repository, let's create a folder ~subA~ and make this a separate git repository.

#+BEGIN_SRC sh
mkdir subA
cd subA/
git init
touch fileSubA
git add fileSubA 
git commit -am 'sub A init'
#+END_SRC

Let's check the ~git log~ in ~subA~

#+BEGIN_SRC sh
git log 
>>> commit 39352fc4864eb9de968b4826d840e92fb58fae6c
>>> Author: Felix Z. Hoffmann <felix11h.dev@gmail.com>
>>> Date:   Wed Dec 7 16:09:56 2016 +0100
>>>
>>>    sub A init
#+END_SRC

and in ~projA~
#+BEGIN_SRC sh
cd ..
git log
>>> commit 4e9b2bd7fa6adfce22ea1fb524a64f756863eca9
>>> Author: Felix Z. Hoffmann <felix11h.dev@gmail.com>
>>> Date:   Wed Dec 7 16:07:17 2016 +0100
>>>
>>>    init proj A
#+END_SRC

The status in ~projA~ is
#+BEGIN_SRC sh
git status -s
?? subA/
#+END_SRC


** Adding as a submodule

So far, so good. Let's now add ~subA/~ as a submodule of ~projA~.

#+BEGIN_SRC sh
git submodule add ./subA/
>>> Adding existing repo at 'subA' to the index
#+END_SRC

It worked!

#+BEGIN_SRC sh
git status -s
>>> A  .gitmodules
>>> A  subA
#+END_SRC

We should commit this change to ~projA~

#+BEGIN_SRC sh
git commit -am 'add subA as submodule'
>>> [master 24c7a9f] add subA as submodule
>>>  2 files changed, 4 insertions(+)
>>>  create mode 100644 .gitmodules
>>>  create mode 160000 subA
#+END_SRC

** So how does this now work?

We now have a submodule within a git repository. There's a few question I'd like to know the answer to:

1. What happens if I make changes in ~subA~? 
2. Should I commit changes of ~subA~ to ~subA~ or to ~projA~?
3. How can I have ~projA~ with ~subA~ on GitHub?

3. How can I clone ~projA~ so that it includes ~subA~?


Let's go through these one by one:

*** *1. Changes in ~subA~*

Let's make a change in ~subA~

#+BEGIN_SRC sh
cd subA/
touch subA_new.file
#+END_SRC

Already here it's interesting to see what happens. The statuses in ~subA~ and ~projA~ are

#+BEGIN_SRC sh
git status -s
>>> ?? subA_new.file
cd .. && git status -s
>>> M subA
#+END_SRC

This means that even changes that aren't staged, or even are part of the git submodule repository, are seen by ~projA~ as modified.

*** *2. Where to commit changes?*

This seems fail-safe. Changes must be committed to ~subA~ first. Only commits of ~subA~ can be committed ~projA~. 

Continuing from above with the unstaged file ~subA_new.file~ if in ~projA~

#+BEGIN_SRC sh
git commit subA -m 'trying to commit changes of subA to projA'
>>> On branch master
>>> Changes not staged for commit:
>>> 	modified:   subA (untracked content)
>>> 
>>> no changes added to commit
#+END_SRC

Aha! So ~projA~ knows about changes to untracked content but won't let you commit. Even if we stage the file...

#+BEGIN_SRC sh
cd subA/ 
git add subA_new.file
cd ..
git commit subA -m 'trying to commit changes of subA to projA'
>>> On branch master
>>> Changes not staged for commit:
>>> 	modified:   subA (modified content)
>>> 
>>> no changes added to commit
#+END_SRC
 
... we can't commit from ~projA~. Notice though how it now says "modified content".

Ok, so let's commit in ~subA~

#+BEGIN_SRC sh
cd subA/
git commit subA_new.file -m 'add _new.file'
>>> [master 039789e] add _new.file
>>> 1 file changed, 0 insertions(+), 0 deletions(-)
>>> create mode 100644 subA_new.file
#+END_SRC

and let's then commit in ~projA~

#+BEGIN_SRC sh
git commit subA/ -m 'commit changes of subA in projA'
>>> [master 7d8af0c] commit changes of subA in projA
>>> 1 file changed, 1 insertion(+), 1 deletion(-)
#+END_SRC

*** *3. How to clone repositories with submodules*

Cloning submodules locally is easy
#+BEGIN_SRC sh
git clone --recursive projA projA_clone
#+END_SRC
will clone ~projA~ into ~projA_clone~, which will include ~subA~. 

Getting our repository on GitHub, is a bit more complicated. First we do the usual
